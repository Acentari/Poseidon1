import entities.Customer;
import entities.Order;
import repos.UsersRepo;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

public class App extends JFrame {
    private JPanel panel1;
    private JTextArea textArea1;
    private JButton newCustomerButton;
    private JButton newOrderButton;
    private JFormattedTextField helloGkikasFormattedTextField;
    private JFrame frame;

    public App() {
        UsersRepo customersRepo = new UsersRepo();
        frame = new JFrame("Poseidon - Order Management System");
        $$$setupUI$$$();
        frame.setContentPane(panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        textArea1.setEditable(false);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        frame.setLocation(new Point((screenSize.width - frameSize.width) / 3,
                (screenSize.height - frameSize.width) / 3));

        newCustomerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JTextField firstName = new JTextField();
                JTextField lastName = new JTextField();
                JTextField phone = new JTextField();
                final JComponent[] inputs = new JComponent[]{
                        new JLabel("First Name"),
                        firstName,
                        new JLabel("Last Name"),
                        lastName,
                        new JLabel("Phone"),
                        phone
                };
                JOptionPane.showConfirmDialog(null, inputs, "New Customer", JOptionPane.PLAIN_MESSAGE);
            }
        });

        newOrderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JTextField product = new JTextField();
                JTextField qty = new JTextField();
                JTextField customerPhone = new JTextField();

                final JComponent[] inputs = new JComponent[]{
                        new JLabel("Product"),
                        product,
                        new JLabel("Quantity"),
                        qty,
                        new JLabel("customer's phone"),
                        customerPhone
                };
                JOptionPane.showConfirmDialog(null, inputs, "New Order", JOptionPane.PLAIN_MESSAGE);
            }
        });

        Customer customer = customersRepo.findByPhone("6944685751");
        List<Order> orderList = customer.getOrders();

        List<Customer> customerList = customersRepo.findAll();

        for (Order order : orderList) {
            System.out.println("order date: " + order.getDate());
            System.out.println("order price: " + order.getPrice());
        }
        for (Customer customer1 : customerList) {
            System.out.println(customer1.getName());
        }

    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(App::new);
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setBackground(new Color(-4505581));
        panel1.setEnabled(false);
        panel1.setForeground(new Color(-5526597));
        panel1.setPreferredSize(new Dimension(1000, 500));
        panel1.putClientProperty("html.disable", Boolean.FALSE);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        textArea1 = new JTextArea();
        textArea1.setAutoscrolls(false);
        textArea1.setBackground(new Color(-4867154));
        textArea1.setColumns(10);
        Font textArea1Font = this.$$$getFont$$$("Consolas", Font.BOLD, 18, textArea1.getFont());
        if (textArea1Font != null) textArea1.setFont(textArea1Font);
        textArea1.setSelectionEnd(16);
        textArea1.setText("choose an option");
        textArea1.setWrapStyleWord(true);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 100, 0);
        panel1.add(textArea1, gbc);
        newCustomerButton = new JButton();
        newCustomerButton.setText("New Customer");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 50, 0);
        panel1.add(newCustomerButton, gbc);
        newOrderButton = new JButton();
        newOrderButton.setText("New Order");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 50, 0);
        panel1.add(newOrderButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
